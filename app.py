import streamlit as st
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
import matplotlib.pyplot as plt
import seaborn as sns
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="Disney Princess Predictor", layout="centered")

st.title("‚ú® Disney Princess Iconic Status Predictor")

# --- –ö–≠–®–ò–†–û–í–ê–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

@st.cache_data
def load_data():
    try:
        df = pd.read_csv("disney_princess_popularity_dataset_300_rows.csv")
        return df.copy()
    except FileNotFoundError:
        st.warning("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return pd.DataFrame({
            'NumberOfSongs': [4, 1, 3, 5],
            'HasSoloSong': ['Yes', 'No', 'Yes', 'No'],
            'BoxOfficeMillions': [500, 300, 700, 200],
            'IMDB_Rating': [7.5, 6.8, 8.2, 6.5],
            'IsIconic': ['Yes', 'No', 'Yes', 'No']
        })

@st.cache_resource
def preprocess_and_train():
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df = load_data()

    # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
    df = df.copy()
    binary_map = {'Yes': 1, 'No': 0}
    for col in ['HasSoloSong', 'IsIconic']:
        df[col] = df[col].map(binary_map).fillna(0)
    for col in ['NumberOfSongs', 'BoxOfficeMillions', 'IMDB_Rating']:
        df[col] = pd.to_numeric(df[col], errors='coerce').fillna(df[col].median())

    # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    features = ['NumberOfSongs', 'HasSoloSong', 'BoxOfficeMillions', 'IMDB_Rating']
    X = df[features]
    y = df['IsIconic']

    model = RandomForestClassifier(random_state=42)
    model.fit(X, y)

    return df, model

# --- –ó–ê–ì–†–£–ñ–ê–ï–ú –í–°–Å –û–î–ù–ò–ú –†–ê–ó–û–ú ---

try:
    data_processed, model = preprocess_and_train()
except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –º–æ–¥–µ–ª–∏: {e}")
    st.stop()

# --- –ò–ù–¢–ï–†–§–ï–ô–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---

st.markdown("### üé´ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏–Ω—Ü–µ—Å—Å—ã")

col1, col2 = st.columns(2)
with col1:
    songs = st.slider("üéµ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Å–µ–Ω", 0, 10, 3)
    solo = st.radio("üé§ –°–æ–ª—å–Ω–∞—è –ø–µ—Å–Ω—è?", ["No", "Yes"]) == "Yes"
with col2:
    box_office = st.slider("üí∞ –ö–∞—Å—Å–æ–≤—ã–µ —Å–±–æ—Ä—ã ($ –º–ª–Ω)", 0, 2000, 500)
    rating = st.slider("‚≠ê –†–µ–π—Ç–∏–Ω–≥ IMDB", 0.0, 10.0, 7.0, step=0.1)

if st.button("üîÆ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å"):
    input_data = pd.DataFrame([[songs, solo, box_office, rating]],
                              columns=['NumberOfSongs', 'HasSoloSong', 'BoxOfficeMillions', 'IMDB_Rating'])

    prediction = model.predict(input_data)[0]
    proba = model.predict_proba(input_data)[0]

    result_text = "üåü –ò–∫–æ–Ω–Ω–∞—è –ø—Ä–∏–Ω—Ü–µ—Å—Å–∞" if prediction == 1 else "üí´ –ù–µ –∏–∫–æ–Ω–Ω–∞—è –ø—Ä–∏–Ω—Ü–µ—Å—Å–∞"
    probability = f"{max(proba) * 100:.1f}%"

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —á–µ—Ä–µ–∑ Streamlit –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    st.markdown("### üìå –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞")
    if prediction == 1:
        st.success(f"{result_text} ‚ú®")
    else:
        st.info(f"{result_text} üí´")

    st.progress(int(max(proba) * 100))
    st.caption(f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: **{probability}**")

    # –ì—Ä–∞—Ñ–∏–∫ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
    fig, ax = plt.subplots(figsize=(4, 3))
    sns.barplot(x=['–ù–µ –∏–∫–æ–Ω–Ω–∞—è', '–ò–∫–æ–Ω–Ω–∞—è'], y=proba, palette="viridis", ax=ax)
    ax.set_ylabel("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å")
    plt.tight_layout()

    buf = io.BytesIO()
    plt.savefig(buf, format='png', dpi=120, bbox_inches='tight')
    plt.close(fig)
    buf.seek(0)
    st.image(buf, use_container_width=True)

# --- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞—Ç–∞—Å–µ—Ç–µ ---
if st.checkbox("üîç –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö"):
    st.markdown("### üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞—Ç–∞—Å–µ—Ç–µ")
    st.write(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(data_processed)}")
    st.dataframe(data_processed.head(3))

# --- –°–æ–≤–µ—Ç—ã ---
st.markdown("### üí° –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–∏–Ω—Ü–µ—Å—Å—É –∏–∫–æ–Ω–∏—á–µ—Å–∫–æ–π?")
st.markdown("""
- üé∂ **–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –ø–µ—Å–µ–Ω** (–∏–¥–µ–∞–ª—å–Ω–æ 4+)
- üé§ **–°–æ–ª—å–Ω–∞—è –ø–µ—Å–Ω—è** –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∞–Ω—Å—ã
- üí∞ **–ö–∞—Å—Å–æ–≤—ã–µ —Å–±–æ—Ä—ã** > $500 –º–ª–Ω
- ‚≠ê **–†–µ–π—Ç–∏–Ω–≥ IMDB** –≤—ã—à–µ 7.5
""")